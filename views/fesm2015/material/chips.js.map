{"version":3,"file":"material__chips.js","sources":["../../../../../../src/components-examples/material/chips/chips-autocomplete/chips-autocomplete-example.html","../../../../../../src/components-examples/material/chips/chips-autocomplete/chips-autocomplete-example.ts","../../../../../../src/components-examples/material/chips/chips-drag-drop/chips-drag-drop-example.html","../../../../../../src/components-examples/material/chips/chips-drag-drop/chips-drag-drop-example.ts","../../../../../../src/components-examples/material/chips/chips-input/chips-input-example.html","../../../../../../src/components-examples/material/chips/chips-input/chips-input-example.ts","../../../../../../src/components-examples/material/chips/chips-overview/chips-overview-example.ts","../../../../../../src/components-examples/material/chips/chips-overview/chips-overview-example.html","../../../../../../src/components-examples/material/chips/chips-stacked/chips-stacked-example.html","../../../../../../src/components-examples/material/chips/chips-stacked/chips-stacked-example.ts","../../../../../../src/components-examples/material/chips/index.ts","../../../../../../src/components-examples/material/chips/chips_public_index.ts"],"sourcesContent":["<mat-form-field class=\"example-chip-list\">\n  <mat-chip-list #chipList aria-label=\"Fruit selection\">\n    <mat-chip\n      *ngFor=\"let fruit of fruits\"\n      [selectable]=\"selectable\"\n      [removable]=\"removable\"\n      (removed)=\"remove(fruit)\">\n      {{fruit}}\n      <mat-icon matChipRemove *ngIf=\"removable\">cancel</mat-icon>\n    </mat-chip>\n    <input\n      placeholder=\"New fruit...\"\n      #fruitInput\n      [formControl]=\"fruitCtrl\"\n      [matAutocomplete]=\"auto\"\n      [matChipInputFor]=\"chipList\"\n      [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n      (matChipInputTokenEnd)=\"add($event)\">\n  </mat-chip-list>\n  <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"selected($event)\">\n    <mat-option *ngFor=\"let fruit of filteredFruits | async\" [value]=\"fruit\">\n      {{fruit}}\n    </mat-option>\n  </mat-autocomplete>\n</mat-form-field>\n","import {COMMA, ENTER} from '@angular/cdk/keycodes';\nimport {Component, ElementRef, ViewChild} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {MatAutocompleteSelectedEvent, MatAutocomplete} from '@angular/material/autocomplete';\nimport {MatChipInputEvent} from '@angular/material/chips';\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\n/**\n * @title Chips Autocomplete\n */\n@Component({\n  selector: 'chips-autocomplete-example',\n  templateUrl: 'chips-autocomplete-example.html',\n  styleUrls: ['chips-autocomplete-example.css'],\n})\nexport class ChipsAutocompleteExample {\n  visible = true;\n  selectable = true;\n  removable = true;\n  separatorKeysCodes: number[] = [ENTER, COMMA];\n  fruitCtrl = new FormControl();\n  filteredFruits: Observable<string[]>;\n  fruits: string[] = ['Lemon'];\n  allFruits: string[] = ['Apple', 'Lemon', 'Lime', 'Orange', 'Strawberry'];\n\n  @ViewChild('fruitInput') fruitInput: ElementRef<HTMLInputElement>;\n  @ViewChild('auto') matAutocomplete: MatAutocomplete;\n\n  constructor() {\n    this.filteredFruits = this.fruitCtrl.valueChanges.pipe(\n        startWith(null),\n        map((fruit: string | null) => fruit ? this._filter(fruit) : this.allFruits.slice()));\n  }\n\n  add(event: MatChipInputEvent): void {\n    const input = event.input;\n    const value = event.value;\n\n    // Add our fruit\n    if ((value || '').trim()) {\n      this.fruits.push(value.trim());\n    }\n\n    // Reset the input value\n    if (input) {\n      input.value = '';\n    }\n\n    this.fruitCtrl.setValue(null);\n  }\n\n  remove(fruit: string): void {\n    const index = this.fruits.indexOf(fruit);\n\n    if (index >= 0) {\n      this.fruits.splice(index, 1);\n    }\n  }\n\n  selected(event: MatAutocompleteSelectedEvent): void {\n    this.fruits.push(event.option.viewValue);\n    this.fruitInput.nativeElement.value = '';\n    this.fruitCtrl.setValue(null);\n  }\n\n  private _filter(value: string): string[] {\n    const filterValue = value.toLowerCase();\n\n    return this.allFruits.filter(fruit => fruit.toLowerCase().indexOf(filterValue) === 0);\n  }\n}\n","<mat-chip-list\n  class=\"example-chip\"\n  cdkDropList \n  cdkDropListOrientation=\"horizontal\"\n  (cdkDropListDropped)=\"drop($event)\">\n  <mat-chip\n    class=\"example-box\"\n    cdkDrag\n    *ngFor=\"let vegetable of vegetables\">\n    {{vegetable.name}}\n  </mat-chip>\n</mat-chip-list>\n","import {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\nimport {Component} from '@angular/core';\n\nexport interface Vegetable {\n  name: string;\n}\n\n/**\n * @title Chips Drag and Drop\n */\n@Component({\n  selector: 'chips-drag-drop-example',\n  templateUrl: 'chips-drag-drop-example.html',\n  styleUrls: ['chips-drag-drop-example.css']\n})\nexport class ChipsDragDropExample {\n  vegetables: Vegetable[] = [\n    {name: 'apple'},\n    {name: 'banana'},\n    {name: 'strawberry'},\n    {name: 'orange'},\n    {name: 'kiwi'},\n    {name: 'cherry'},\n  ];\n\n  drop(event: CdkDragDrop<Vegetable[]>) {\n    moveItemInArray(this.vegetables, event.previousIndex, event.currentIndex);\n  }\n}\n","<mat-form-field class=\"example-chip-list\">\n  <mat-chip-list #chipList aria-label=\"Fruit selection\">\n    <mat-chip *ngFor=\"let fruit of fruits\" [selectable]=\"selectable\"\n             [removable]=\"removable\" (removed)=\"remove(fruit)\">\n      {{fruit.name}}\n      <mat-icon matChipRemove *ngIf=\"removable\">cancel</mat-icon>\n    </mat-chip>\n    <input placeholder=\"New fruit...\"\n           [matChipInputFor]=\"chipList\"\n           [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n           [matChipInputAddOnBlur]=\"addOnBlur\"\n           (matChipInputTokenEnd)=\"add($event)\">\n  </mat-chip-list>\n</mat-form-field>\n","import {COMMA, ENTER} from '@angular/cdk/keycodes';\nimport {Component} from '@angular/core';\nimport {MatChipInputEvent} from '@angular/material/chips';\n\nexport interface Fruit {\n  name: string;\n}\n\n/**\n * @title Chips with input\n */\n@Component({\n  selector: 'chips-input-example',\n  templateUrl: 'chips-input-example.html',\n  styleUrls: ['chips-input-example.css'],\n})\nexport class ChipsInputExample {\n  visible = true;\n  selectable = true;\n  removable = true;\n  addOnBlur = true;\n  readonly separatorKeysCodes: number[] = [ENTER, COMMA];\n  fruits: Fruit[] = [\n    {name: 'Lemon'},\n    {name: 'Lime'},\n    {name: 'Apple'},\n  ];\n\n  add(event: MatChipInputEvent): void {\n    const input = event.input;\n    const value = event.value;\n\n    // Add our fruit\n    if ((value || '').trim()) {\n      this.fruits.push({name: value.trim()});\n    }\n\n    // Reset the input value\n    if (input) {\n      input.value = '';\n    }\n  }\n\n  remove(fruit: Fruit): void {\n    const index = this.fruits.indexOf(fruit);\n\n    if (index >= 0) {\n      this.fruits.splice(index, 1);\n    }\n  }\n}\n","import {Component} from '@angular/core';\n\n/**\n * @title Basic chips\n */\n@Component({\n  selector: 'chips-overview-example',\n  templateUrl: 'chips-overview-example.html',\n})\nexport class ChipsOverviewExample {}\n","<mat-chip-list aria-label=\"Fish selection\">\n  <mat-chip>One fish</mat-chip>\n  <mat-chip>Two fish</mat-chip>\n  <mat-chip color=\"primary\" selected>Primary fish</mat-chip>\n  <mat-chip color=\"accent\" selected>Accent fish</mat-chip>\n</mat-chip-list>\n","<mat-chip-list class=\"mat-chip-list-stacked\" aria-label=\"Color selection\">\n  <mat-chip *ngFor=\"let chip of availableColors\" selected [color]=\"chip.color\">\n    {{chip.name}}\n  </mat-chip>\n</mat-chip-list>\n","import {Component} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\nexport interface ChipColor {\n  name: string;\n  color: ThemePalette;\n}\n\n/**\n * @title Stacked chips\n */\n@Component({\n  selector: 'chips-stacked-example',\n  templateUrl: 'chips-stacked-example.html',\n  styleUrls: ['chips-stacked-example.css'],\n})\nexport class ChipsStackedExample {\n  availableColors: ChipColor[] = [\n    {name: 'none', color: undefined},\n    {name: 'Primary', color: 'primary'},\n    {name: 'Accent', color: 'accent'},\n    {name: 'Warn', color: 'warn'}\n  ];\n}\n","import {DragDropModule} from '@angular/cdk/drag-drop';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatIconModule} from '@angular/material/icon';\nimport {ChipsAutocompleteExample} from './chips-autocomplete/chips-autocomplete-example';\nimport {ChipsDragDropExample} from './chips-drag-drop/chips-drag-drop-example';\nimport {ChipsInputExample} from './chips-input/chips-input-example';\nimport {ChipsOverviewExample} from './chips-overview/chips-overview-example';\nimport {ChipsStackedExample} from './chips-stacked/chips-stacked-example';\n\nexport {\n  ChipsAutocompleteExample,\n  ChipsDragDropExample,\n  ChipsInputExample,\n  ChipsOverviewExample,\n  ChipsStackedExample,\n};\n\nconst EXAMPLES = [\n  ChipsAutocompleteExample,\n  ChipsDragDropExample,\n  ChipsInputExample,\n  ChipsOverviewExample,\n  ChipsStackedExample,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    DragDropModule,\n    MatAutocompleteModule,\n    MatChipsModule,\n    MatIconModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n  ],\n  declarations: EXAMPLES,\n  exports: EXAMPLES,\n  entryComponents: EXAMPLES,\n})\nexport class ChipsExamplesModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵlistener","i0.ɵɵtemplate","i0.ɵɵproperty","i0.ɵɵadvance","i0.ɵɵtextInterpolate1"],"mappings":"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"}